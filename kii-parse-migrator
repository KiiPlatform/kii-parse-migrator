#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vim:set sts=4 sw=4 tw=0 et:

import kii_cloud
import logging
import argparse
from zipfile import ZipFile
import json
import os
import sys
import re

logger = logging.getLogger('kii-parse-migrator')


USERS = None
BUCKETS = None

def parse_args():
    parser = argparse.ArgumentParser(
            description='Move data from Parse to Kii Cloud')
    parser.add_argument('-i', '--input',
            help='export.zip from Parse', required=True)
    parser.add_argument('-d', '--app_id',
            help='App ID of your app on Kii Cloud', required=True)
    parser.add_argument('-k', '--app_key',
            help='App Key of your app on Kii Cloud', required=True)
    parser.add_argument('-r', '--region', help='Specify "jp" for Japan server')
    parser.add_argument('-l', '--log', help='Output migration log')
    parser.add_argument('-n', '--dryrun', action='store_true')
    parser.add_argument('-v', '--verbose', dest='verbose', action='store_true')
    return parser.parse_args()

def is_user_schema(schema):
    return schema == '_User'

def to_schema(filename):
    raw = os.path.splitext(os.path.basename(filename))[0]
    return re.sub(r'[^-a-zA-Z0-9_]', '_', raw)

def to_json(array):
    # FIXME: add error handling
    return json.loads('\n'.join(array))

def get_object_id(obj):
    raw_id = obj.get('objectId')
    if raw_id and isinstance(raw_id, dict):
        return raw_id.get('$oid')
    else:
        return raw_id

def read_json_objects(file):
    buf = []
    for line in file:
        s = line.rstrip().lstrip()
        if s == '{':
            buf = [ '{' ]
        elif s == '}' or s == '},':
            buf.append('}')
            yield to_json(buf)
        else:
            buf.append(s)

def convert_object(schema, orig):
    converted = orig.copy()
    if is_user_schema(schema):
        converted['loginName'] = orig['username']
        converted['password'] = '12345678'
    # FIXME: convert fields if need.
    return converted

def save_object(schema, obj, obj_id):
    logger.debug('save_object: schema=%s obj=%s obj_id=%s' %
            (schema, obj, obj_id))
    retval = False
    if is_user_schema(schema):
        retval = kii_cloud.create_user(obj)
        username = obj.get('loginName')
        if USERS != None and retval and username:
            USERS[username] = True
    else:
        retval = kii_cloud.create_object(schema, obj, obj_id)
        if BUCKETS != None and retval and schema:
            BUCKETS[schema] = True
    return retval

def migrate_an_object(schema, orig):
    obj_id = get_object_id(orig)
    converted = convert_object(schema, orig)
    return save_object(schema, converted, obj_id)

def migrate_objects(zip_file, filename):
    schema = to_schema(filename)
    if not schema:
        logger.warn('skip %s', filename)
        return
    logger.debug('migrate_objects: filename=%s (schema=%s)' %
            (filename, schema))
    try:
        zf = zip_file.open(filename, 'rU')
        if not zf:
            print('HERE_A')
        for json in read_json_objects(zf):
            migrate_an_object(schema, json)
    finally:
        zf.close()

def migrate_to_kii(zip_path, app_id, app_key, region):
    kii_cloud.init(app_id, app_key, region)
    zip_file = ZipFile(zip_path, 'r')
    try:
        for info in zip_file.infolist():
            if info.filename[-5:] != '.json':
                continue
            migrate_objects(zip_file, info.filename)
    finally:
        zip_file.close()

def output_result(out):
    out.write('Migration results\n')
    out.write('\nUsers (loginName):\n')
    for name in USERS:
        out.write('    %s\n' % name)
    out.write('\nBuckets:\n')
    for bucket in BUCKETS:
        out.write('    %s\n' % bucket)
    if kii_cloud.TOKEN:
        out.write('\nToken: %s\n' % kii_cloud.TOKEN)
    msg = """
Sample of verification commands:

* Users

  curl -v -X GET \\
      -H "Authorization:Bearer {TOKEN}" \\
      -H "x-kii-appid:{APP_ID}" \\
      -H "x-kii-appkey:{APP_KEY}" \\
      "{BASE_URL}/apps/{APP_ID}/users/LOGIN_NAME:{{USERNAME}}"

  Where {{USERNAME}} is replaced by one of above users.

  See below for details:

    http://documentation.kii.com/en/guides/rest/managing-users/retrieving-other-user-s-data/
    http://documentation.kii.com/ja/guides/rest/managing-users/retrieving-other-user-s-data/

* Bucket and objects

  curl -v -X POST \\
      -H "Authorization:Bearer {TOKEN}" \\
      -H "content-type:application/vnd.kii.QueryRequest+json" \\
      -H "x-kii-appid:{APP_ID}" \\
      -H "x-kii-appkey:{APP_KEY}" \\
      -d '{{"bucketQuery":{{"clause":{{"type":"all"}}}}}}' \\
      "{BASE_URL}/apps/{APP_ID}/buckets/{{BUCKETNAME}}/query"

  Where {{BUCKETNAME}} is replaced by one of above buckets.

  See below for details:

    http://documentation.kii.com/en/guides/rest/managing-data/object-storages/querying/
    http://documentation.kii.com/ja/guides/rest/managing-data/object-storages/querying/

"""
    out.write(msg.format(BASE_URL=kii_cloud.BASE_URL, TOKEN=kii_cloud.TOKEN,
        APP_ID=kii_cloud.APP_ID, APP_KEY=kii_cloud.APP_KEY))

if __name__=="__main__":
    args = parse_args()
    if args.verbose:
        logging.basicConfig(level=logging.DEBUG)
        logger.debug('Arguments: %s', args)
    if args.dryrun:
        def save_object(schema, obj, obj_id):
            logger.debug('save_object: schema=%s obj=%s obj_id=%s' %
                    (schema, obj, obj_id))
            return True
    if args.log:
        USERS = {}
        BUCKETS = {}

    migrate_to_kii(args.input, args.app_id, args.app_key, args.region)

    if args.log:
        log = open(args.log, 'wb')
        try:
            output_result(log)
        finally:
            log.close()
